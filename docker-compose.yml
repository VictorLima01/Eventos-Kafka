services:
  kafka:
    image: bitnami/kafka:latest
    restart: on-failure
    ports:
      - 9092:9092
    environment:
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_NUM_PARTITIONS=3
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=alura
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  app-producer:
    build:
      context: .  # O contexto continua sendo a pasta onde est√° o docker-compose.yml
      dockerfile: sb-kafka-producer/Dockerfile.dockerfile  # Caminho relativo do Dockerfile do Producer
    container_name: app-java-producer
    depends_on:
      - kafka
    ports:
      - "9090:9090"
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  app-consumer:
    build:
      context: .  # Mesmo contexto
      dockerfile: sb-kafka-consumer/Dockerfile.dockerfile  # Caminho relativo do Dockerfile do Consumer
    container_name: app-java-consumer
    depends_on:
      - kafka
    ports:
      - "9091:9091"  # Porta diferente para evitar conflitos
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
